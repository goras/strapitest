type Character {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  movies(sort: String, limit: Int, start: Int, where: JSON): [Movie]
}

type CharacterAggregator {
  count: Int
}

type CharacterConnection {
  values: [Character]
  groupBy: CharacterGroupBy
  aggregate: CharacterAggregator
}

type CharacterConnection_id {
  key: ID
  connection: CharacterConnection
}

type CharacterConnectionCreatedAt {
  key: DateTime
  connection: CharacterConnection
}

type CharacterConnectionName {
  key: String
  connection: CharacterConnection
}

type CharacterConnectionUpdatedAt {
  key: DateTime
  connection: CharacterConnection
}

type CharacterGroupBy {
  _id: [CharacterConnection_id]
  createdAt: [CharacterConnectionCreatedAt]
  updatedAt: [CharacterConnectionUpdatedAt]
  name: [CharacterConnectionName]
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type Genre {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
}

type GenreAggregator {
  count: Int
}

type GenreConnection {
  values: [Genre]
  groupBy: GenreGroupBy
  aggregate: GenreAggregator
}

type GenreConnection_id {
  key: ID
  connection: GenreConnection
}

type GenreConnectionCreatedAt {
  key: DateTime
  connection: GenreConnection
}

type GenreConnectionName {
  key: String
  connection: GenreConnection
}

type GenreConnectionUpdatedAt {
  key: DateTime
  connection: GenreConnection
}

type GenreGroupBy {
  _id: [GenreConnection_id]
  createdAt: [GenreConnectionCreatedAt]
  updatedAt: [GenreConnectionUpdatedAt]
  name: [GenreConnectionName]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Character | CharacterConnection | CharacterAggregator | CharacterGroupBy | CharacterConnection_id | CharacterConnectionCreatedAt | CharacterConnectionUpdatedAt | CharacterConnectionName | Genre | GenreConnection | GenreAggregator | GenreGroupBy | GenreConnection_id | GenreConnectionCreatedAt | GenreConnectionUpdatedAt | GenreConnectionName | Movie | MovieConnection | MovieAggregator | MovieGroupBy | MovieConnection_id | MovieConnectionCreatedAt | MovieConnectionUpdatedAt | MovieConnectionName | MovieConnectionCharacter | MovieConnectionGenre | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionResetPasswordToken | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Movie {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  character: Character
  genre: Genre
}

type MovieAggregator {
  count: Int
}

type MovieConnection {
  values: [Movie]
  groupBy: MovieGroupBy
  aggregate: MovieAggregator
}

type MovieConnection_id {
  key: ID
  connection: MovieConnection
}

type MovieConnectionCharacter {
  key: ID
  connection: MovieConnection
}

type MovieConnectionCreatedAt {
  key: DateTime
  connection: MovieConnection
}

type MovieConnectionGenre {
  key: ID
  connection: MovieConnection
}

type MovieConnectionName {
  key: String
  connection: MovieConnection
}

type MovieConnectionUpdatedAt {
  key: DateTime
  connection: MovieConnection
}

type MovieGroupBy {
  _id: [MovieConnection_id]
  createdAt: [MovieConnectionCreatedAt]
  updatedAt: [MovieConnectionUpdatedAt]
  name: [MovieConnectionName]
  character: [MovieConnectionCharacter]
  genre: [MovieConnectionGenre]
}

type Query {
  character(id: ID!): Character
  characters(sort: String, limit: Int, start: Int, where: JSON): [Character]
  charactersConnection(sort: String, limit: Int, start: Int, where: JSON): CharacterConnection
  genre(id: ID!): Genre
  genres(sort: String, limit: Int, start: Int, where: JSON): [Genre]
  genresConnection(sort: String, limit: Int, start: Int, where: JSON): GenreConnection
  movie(id: ID!): Movie
  movies(sort: String, limit: Int, start: Int, where: JSON): [Movie]
  moviesConnection(sort: String, limit: Int, start: Int, where: JSON): MovieConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionResetPasswordToken {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  resetPasswordToken: [UsersPermissionsUserConnectionResetPasswordToken]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
